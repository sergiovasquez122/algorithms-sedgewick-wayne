1.5.1 Show the content of the id[] array and the number of times the array is
accessed for each input pair when you use quick-find for the sequence
9-0 3-4 5-8 7-2 2-1 5-7 0-3 4-2

        id[]
p q 0 1 2 3 4 5 6 7 8 9
------------------------
9 0 0 1 2 3 4 5 6 7 8 9
    0 1 2 3 4 5 6 7 8 0
3 4 0 1 2 3 4 5 6 7 8 0
    0 1 2 4 4 5 6 7 8 0
5 8 0 1 2 4 4 5 6 7 8 0
    0 1 2 4 4 8 6 7 8 0
7 2 0 1 2 4 4 8 6 7 8 0
    0 1 2 4 4 8 6 2 8 0
2 1 0 1 2 4 4 8 6 2 8 0
    0 1 1 4 4 8 6 1 8 0
5 7 0 1 1 4 4 8 6 1 8 0
    0 1 1 4 4 1 6 1 1 0
0 3 0 1 1 4 4 1 6 1 1 0
    4 1 1 4 4 1 6 1 1 4
4 2 4 1 1 4 4 1 6 1 1 4
    1 1 1 1 1 1 6 1 1 1
1.5.2 Do exercise 1.5.1 but use quick-union. In addition, draw the forest
of trees represented by the id[] array after each input pair is processed.

initialization

        0 1 2 3 4 5 6 7 8 9
array = 0 1 2 3 4 5 6 7 8 9

forest
0 1 2 3 4 5 6 7 8 9

query 9-0

        0 1 2 3 4 5 6 7 8 9
array = 0 1 2 3 4 5 6 7 8 0

forest

0 1 2 3 4 5 6 7 8
|
9

query 3-4

        0 1 2 3 4 5 6 7 8 9
array = 0 1 2 4 4 5 6 7 8 0

forest

0 1 2 4 5 6 7 8
|     |
9     3


query 5-8

        0 1 2 3 4 5 6 7 8 9
array = 0 1 2 4 4 8 6 7 8 0

forest

0 1 2 4 6 7 8
|     |     |
9     3     5


query 5-8

        0 1 2 3 4 5 6 7 8 9
array = 0 1 2 4 4 8 6 7 8 0

forest

0 1 2 4 6 7 8
|     |     |
9     3     5


query 7-2

        0 1 2 3 4 5 6 7 8 9
array = 0 1 2 4 4 8 6 2 8 0

forest

0 1 2 4 6 8
|   | |   |
9   7 3   5

query 2-1

        0 1 2 3 4 5 6 7 8 9
array = 0 1 1 4 4 8 6 2 8 0

forest
    1
    |
0   2 4 6 8
|   | |   |
9   7 3   5

query 5-7

        0 1 2 3 4 5 6 7 8 9
array = 0 1 1 4 4 8 6 2 1 0

forest

0  1    4  6
|  |\   |
9  2 8  3
   | |
   7 5

query 0-3


        0 1 2 3 4 5 6 7 8 9
array = 4 1 1 4 4 8 6 2 1 0

forest

  1    4  6
  |\   |\
  2 8  3 0
  | |    |
  7 5    9

query 4-2


        0 1 2 3 4 5 6 7 8 9
array = 4 1 1 4 1 8 6 2 1 0

forest

  1---
  |   \
  2   4  6
  |\   |\
  7 5  3 0
         |
         9

1.5.3 Do exercise 1.5.1, but use weighted quick-union


initialization

        0 1 2 3 4 5 6 7 8 9
array = 0 1 2 3 4 5 6 7 8 9

forest
0 1 2 3 4 5 6 7 8 9


query 9-0

        0 1 2 3 4 5 6 7 8 9
array = 0 1 2 3 4 5 6 7 8 0

forest

9 1 2 3 4 5 6 7 8
|
0


query 3-4

        0 1 2 3 4 5 6 7 8 9
array = 9 1 2 3 4 5 6 7 8 9

forest

9 1 2 3 5 6 7 8
|     |
0     4


query 5-8

        0 1 2 3 4 5 6 7 8 9
array = 9 1 2 3 4 5 6 7 5 9

forest

9 1 2 3 5 6 7
|     | |
0     4 8


query 7-2

        0 1 2 3 4 5 6 7 8 9
array = 9 1 7 3 4 5 6 7 5 9

forest

9 1 3 5 6 7
|   | |   |
0   4 8   2


query 2-1

        0 1 2 3 4 5 6 7 8 9
array = 9 7 7 3 4 5 6 7 5 9

forest

9 3 5 6 7
| | |   |\
0 4 8   2 1


query 5-7

        0 1 2 3 4 5 6 7 8 9
array = 9 7 7 3 4 7 6 7 5 9

forest

  7---    9  3  6
 / \  \   |  |
5   2  1  0  4
|
8


query 0-3

        0 1 2 3 4 5 6 7 8 9
array = 9 7 7 9 4 7 6 7 5 9

forest

  7---    9<-3  6
 / \  \   |  |
5   2  1  0  4
|
8


query 4-2

        0 1 2 3 4 5 6 7 8 9
array = 9 7 7 7 4 7 6 7 5 9

forest

  7------<-9<-3  6
 / \  \    |  |
5   2  1   0  4
|
8

1.5.4 show the contents of the sz[] and id[] arrays and the number of array accesses
for each input pair corresponding to the weighted quick-union examples in the text

1.5.5 estimate the minimum amount of time that would be required for quick-find
to solve a dynamic connectivity problem with 10^9 sites and 10^6 input pairs,
on a computer capable of executing 10^9 instructions per second. Assume that each iteration
of the inner for loop requires 10 machine instructions.

1.5.6 repeat exercise 1.5.5 for weighted quick-union

1.5.8 Give a counter example that shows why this intuitive implementation of
union() for quick-find is not correct

public void union(int p, int q)
{
if (connected(p, q)) return;
// Rename p’s component to q’s name.
for (int i = 0; i < id.length; i++)
if (id[i] == id[p]) id[i] = id[q];
count--;
}


